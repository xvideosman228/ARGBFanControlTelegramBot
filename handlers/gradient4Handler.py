from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from random import choice
from keyboard import customPresetsKeyboard, colorKeyboard, addToFavoritesKeyboard
from serialControl import FanController
from stateMachine import StateMachine
from config.loggingConfig import exception, logger
import json

with open('./config/buttons.json') as file:
    names = json.load(file)

with open('./config/texts.json') as file:
    texts = json.load(file)


gradient4Router = Router()

# üé≤
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
def jsonUpdate():
    with open('./config/presets.json', encoding='utf-8') as file:
        presets = json.load(file)
        return presets


# –§–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4), F.text.in_(jsonUpdate().keys()))
async def color(message: Message):
    presets = jsonUpdate()
    # –ü—Ä—è–º–æ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    colors_str = presets.get(message.text)
    if not colors_str:
        await message.answer("–¢–∞–∫–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=customPresetsKeyboard)
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ü–≤–µ—Ç–æ–≤ –ø—Ä–æ–±–µ–ª–∞–º–∏
    colors = colors_str.strip().split()
    color1, color2, color3, color4 = colors[:4]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
    await message.answer(f"{message.text}-–≥—Ä–∞–¥–∏–µ–Ω—Ç")
    FanController.gradient4(color1, color2, color3, color4)

@exception
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4), F.text == names["random4gradient"])
async def randomColor(message: Message, state: FSMContext):
    colors = [choice(list(names["colors"]["basicColors"].keys())).upper() for x in range(4)]
    color1, color2, color3, color4 = colors[0], colors[1], colors[2], colors[3]
    emojis = [names["colors"]["basicColors"][x.lower()] for x in colors]
    await message.answer(f"{"".join(emojis)}-–≥—Ä–∞–¥–∏–µ–Ω—Ç", reply_markup=addToFavoritesKeyboard)
    FanController.gradient4(color1, color2, color3, color4)
    # await state.set_state(StateMachine.CUSTOM_PRESETS)
    print("".join(emojis))
    await state.update_data(GRADIENT4_COLOR="".join(emojis))
    await state.update_data(GRADIENT4_COLOR_TEXT=" ".join(colors))


@exception
@gradient4Router.callback_query(F.data == "favorite")
async def favorite(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    grad = await state.get_data()
    gradient = grad["GRADIENT4_COLOR"]
    color = grad["GRADIENT4_COLOR_TEXT"]

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with open("./config/presets.json", "r") as presetFile:
            preset = json.load(presetFile)
    except FileNotFoundError:
        preset = {}  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    preset[gradient] = color

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open("./config/presets.json", "w") as presetFile:
        json.dump(preset, presetFile, indent=4)

    print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")



@exception
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4), F.text == names["make"])
async def make(message: Message, state: FSMContext):
    await state.set_state(StateMachine.GRADIENT4_1)
    await message.answer('–í—ã–±–µ—Ä–∏ 1-–π —Ü–≤–µ—Ç', reply_markup=colorKeyboard)

@exception
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4_1), F.text.in_(names["colors"]["basicColors"].values()))
async def colorPick(message: Message, state: FSMContext):
    colorIndex = int(list(names["colors"]["basicColors"].values()).index(message.text))
    color = list(names["colors"]["basicColors"].keys())[colorIndex]
    logger.info(f"–í—ã–±—Ä–∞–Ω {color.capitalize()} –¥–ª—è 4Gradient_1")

    await state.update_data(GRADIENT4_COLOR_1=f"{color.upper()}")
    await state.set_state(StateMachine.GRADIENT4_2)
    await message.answer(names["colors"]["basicColors"][f"{color}"] + ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è ' + names["custom"]["gradient4"] + '\n–í—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä–æ–π', reply_markup=colorKeyboard)

@exception
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4_2), F.text.in_(names["colors"]["basicColors"].values()))
async def colorPick(message: Message, state: FSMContext):
    colorIndex = int(list(names["colors"]["basicColors"].values()).index(message.text))
    color = list(names["colors"]["basicColors"].keys())[colorIndex]
    logger.info(f"–í—ã–±—Ä–∞–Ω {color.capitalize()} –¥–ª—è 4Gradient_2")

    await state.update_data(GRADIENT4_COLOR_2=f"{color.upper()}")
    await state.set_state(StateMachine.GRADIENT4_3)
    await message.answer(names["colors"]["basicColors"][f"{color}"] + ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ç–æ—Ä–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è ' + names["custom"]["gradient4"] + '\n–í—ã–±–µ—Ä–∏ —Ç—Ä–µ—Ç–∏–π', reply_markup=colorKeyboard)

@exception
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4_3), F.text.in_(names["colors"]["basicColors"].values()))
async def colorPick(message: Message, state: FSMContext):
    colorIndex = int(list(names["colors"]["basicColors"].values()).index(message.text))
    color = list(names["colors"]["basicColors"].keys())[colorIndex]
    logger.info(f"–í—ã–±—Ä–∞–Ω {color.capitalize()} –¥–ª—è 4Gradient_3")

    await state.update_data(GRADIENT4_COLOR_3=f"{color.upper()}")
    await state.set_state(StateMachine.GRADIENT4_4)
    await message.answer(names["colors"]["basicColors"][f"{color}"] + ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è ' + names["custom"]["gradient4"] + '\n–í—ã–±–µ—Ä–∏ —á–µ—Ç–≤—ë—Ä—Ç—ã–π', reply_markup=colorKeyboard)



@exception
@gradient4Router.message(StateFilter(StateMachine.GRADIENT4_4), F.text.in_(names["colors"]["basicColors"].values()))
async def colorPick(message: Message, state: FSMContext):
    colorIndex = int(list(names["colors"]["basicColors"].values()).index(message.text))
    color = list(names["colors"]["basicColors"].keys())[colorIndex]
    logger.info(f"–í—ã–±—Ä–∞–Ω {color.capitalize()} –¥–ª—è 4Gradient_4")

    await state.update_data(GRADIENT4_COLOR_4=f"{color.upper()}")
    await message.answer(names["colors"]["basicColors"][f"{color}"] + ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è ' + names["custom"]["gradient4"])
    color = await state.get_data()
    # await state.update_data(GRADIENT4_COLOR=)
    color1 = color["GRADIENT4_COLOR_1"]
    color2 = color["GRADIENT4_COLOR_2"]
    color3 = color["GRADIENT4_COLOR_3"]
    color4 = color["GRADIENT4_COLOR_4"]
    emojis = [color1,color2,color3,color4]
    colors = [names["colors"]["basicColors"][x.lower()] for x in emojis]
    await state.update_data(GRADIENT4_COLOR="".join(colors))
    await state.update_data(GRADIENT4_COLOR_TEXT=" ".join(emojis))
    FanController.gradient4(color1, color2, color3, color4)
    await message.answer(texts["finalGradient"] + " ".join(colors),reply_markup=addToFavoritesKeyboard)
    await state.set_state(StateMachine.CUSTOM_PRESETS)
